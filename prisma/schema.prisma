// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

// Defines how the Prisma Client is generated.
generator client {
  provider = "prisma-client-js"
}

// Defines your database connection.
// The 'url' is loaded from the .env file for security.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//=============================================================================
//  AUTHENTICATION MODELS (Required by Next-Auth)
//  These models store user identity, sessions, and linked accounts.
//=============================================================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Application-specific relation: A user can have many builds.
  builds        Build[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


//=============================================================================
//  APPLICATION MODELS (For the PC Builder Logic)
//  These models define the core features of your application.
//=============================================================================

// A user's saved PC build configuration.
model Build {
  id        String   @id @default(cuid())
  name      String   @default("My New PC")
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to the user who owns this build.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // A build is composed of many components. This is the link table.
  components BuildComponent[]
}

// A list of all available PC components in the store.
model Component {
  id       String  @id @default(cuid())
  name     String
  type     ComponentType // The category of the component (e.g., CPU, GPU).
  price    Float
  imageUrl String?
  specs    Json // Flexible JSON field for component specifications.

  // Link to all the builds this component is a part of.
  builds BuildComponent[]
}

// This is a "join table" that connects a Build to a Component.
// It represents one component being placed inside one build.
model BuildComponent {
  id          String @id @default(cuid())
  buildId     String
  componentId String

  // Relations to the parent models.
  build     Build     @relation(fields: [buildId], references: [id], onDelete: Cascade)
  component Component @relation(fields: [componentId], references: [id])

  // Ensures you can't add the same component type to the same build twice.
  // Note: For simplicity, we manage this logic in the server action.
  // A unique constraint here would prevent swapping parts easily.
}

// An Enum to categorize the different types of components.
// This ensures data consistency.
enum ComponentType {
  CPU
  GPU
  MOTHERBOARD
  RAM
  STORAGE
  PSU
  CASE
}